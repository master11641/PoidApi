// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LeitnerApi.Migrations
{
    [DbContext(typeof(BarnamaConntext))]
    [Migration("20220407143959_meel.order")]
    partial class meelorder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ActivityRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityRates");
                });

            modelBuilder.Entity("Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("AllergyDiet", b =>
                {
                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.HasKey("AllergyId", "DietId");

                    b.HasIndex("DietId");

                    b.ToTable("AllergyDiet");
                });

            modelBuilder.Entity("BadHabit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BadHabits");
                });

            modelBuilder.Entity("BadHabitDiet", b =>
                {
                    b.Property<int>("BadHabitId")
                        .HasColumnType("int");

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.HasKey("BadHabitId", "DietId");

                    b.HasIndex("DietId");

                    b.ToTable("BadHabitDiet");
                });

            modelBuilder.Entity("Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityRateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ActivityRateId")
                        .HasColumnType("int");

                    b.Property<double?>("Age")
                        .HasColumnType("float");

                    b.Property<string>("AllergyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<bool?>("RequestComplete")
                        .HasColumnType("bit");

                    b.Property<string>("SicknessDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SleepRateId")
                        .HasColumnType("int");

                    b.Property<string>("TakingMedicationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double?>("Waist")
                        .HasColumnType("float");

                    b.Property<int?>("WaterRateId")
                        .HasColumnType("int");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.Property<double?>("Wrist")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ActivityRateId");

                    b.HasIndex("GenderId");

                    b.HasIndex("GoalId");

                    b.HasIndex("PlanId");

                    b.HasIndex("SleepRateId");

                    b.HasIndex("UserId");

                    b.HasIndex("WaterRateId");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BazarProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsageRestrictions")
                        .HasColumnType("int");

                    b.Property<string>("UserNames")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("FatPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FatParts");
                });

            modelBuilder.Entity("FatPartDiet", b =>
                {
                    b.Property<int>("FatPartId")
                        .HasColumnType("int");

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.HasKey("FatPartId", "DietId");

                    b.HasIndex("DietId");

                    b.ToTable("FatPartDiets");
                });

            modelBuilder.Entity("Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("FoodImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMainImage")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodImages");
                });

            modelBuilder.Entity("FoodMeel", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("MeelId")
                        .HasColumnType("int");

                    b.HasKey("FoodId", "MeelId");

                    b.HasIndex("MeelId");

                    b.ToTable("FoodMeels");
                });

            modelBuilder.Entity("FoodNutrient", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("NutrientId")
                        .HasColumnType("int");

                    b.HasKey("FoodId", "NutrientId");

                    b.HasIndex("NutrientId");

                    b.ToTable("FoodNutrients");
                });

            modelBuilder.Entity("FoodUnit", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<double?>("Calcium")
                        .HasColumnType("float");

                    b.Property<double?>("Calorie")
                        .HasColumnType("float");

                    b.Property<double?>("Carbohydrate")
                        .HasColumnType("float");

                    b.Property<double?>("Fat")
                        .HasColumnType("float");

                    b.Property<double?>("Iron")
                        .HasColumnType("float");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<double?>("Magnesium")
                        .HasColumnType("float");

                    b.Property<double?>("Phosphor")
                        .HasColumnType("float");

                    b.Property<double?>("Potassium")
                        .HasColumnType("float");

                    b.Property<double?>("Protein")
                        .HasColumnType("float");

                    b.Property<double?>("Sfa")
                        .HasColumnType("float");

                    b.Property<double?>("Sodium")
                        .HasColumnType("float");

                    b.Property<double?>("Sugar")
                        .HasColumnType("float");

                    b.Property<double?>("Tfa")
                        .HasColumnType("float");

                    b.Property<double?>("Umfa")
                        .HasColumnType("float");

                    b.Property<double?>("Upfa")
                        .HasColumnType("float");

                    b.HasKey("FoodId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("FoodUnits");
                });

            modelBuilder.Entity("Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Authority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServicePackageId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicePackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Meel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meels");
                });

            modelBuilder.Entity("Muscle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Muscles");
                });

            modelBuilder.Entity("Nutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMicro")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nutrients");
                });

            modelBuilder.Entity("Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Calorie")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("PlanDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("VoiceUserUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanDates");
                });

            modelBuilder.Entity("PlanDetail", b =>
                {
                    b.Property<int>("PlanDateId")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<double>("Calorie")
                        .HasColumnType("float");

                    b.Property<string>("FailDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("MeelId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplacePlanDetailId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<double>("UnitValue")
                        .HasColumnType("float");

                    b.HasKey("PlanDateId", "FoodId");

                    b.HasIndex("FoodId");

                    b.HasIndex("MeelId");

                    b.HasIndex("UnitId");

                    b.ToTable("PlanDetails");
                });

            modelBuilder.Entity("Podcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PodcastAudio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PodcastGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PodcastGroupId");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("PodcastGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PodcastGroups");
                });

            modelBuilder.Entity("PodcastQuestion", b =>
                {
                    b.Property<int>("PodcastId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("PodcastId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("PodcastQuestions");
                });

            modelBuilder.Entity("PodcastSickness", b =>
                {
                    b.Property<int>("PodcastId")
                        .HasColumnType("int");

                    b.Property<int>("SicknessId")
                        .HasColumnType("int");

                    b.HasKey("PodcastId", "SicknessId");

                    b.HasIndex("SicknessId");

                    b.ToTable("PodcastSicknesses");
                });

            modelBuilder.Entity("Protein", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proteins");
                });

            modelBuilder.Entity("ProteinDiet", b =>
                {
                    b.Property<int>("ProteinId")
                        .HasColumnType("int");

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<int>("ResponseValue")
                        .HasColumnType("int");

                    b.HasKey("ProteinId", "DietId");

                    b.HasIndex("DietId");

                    b.ToTable("ProteinDiets");
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuestionDiet", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<int>("ResponseValue")
                        .HasColumnType("int");

                    b.HasKey("QuestionId", "DietId");

                    b.HasIndex("DietId");

                    b.ToTable("QuestionDiets");
                });

            modelBuilder.Entity("Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SImages");
                });

            modelBuilder.Entity("ServicePackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BazarProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpireAfterBuyInDays")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTimed")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("ServicePackages");
                });

            modelBuilder.Entity("Sickness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sicknesses");
                });

            modelBuilder.Entity("SicknessDiet", b =>
                {
                    b.Property<int>("SicknessId")
                        .HasColumnType("int");

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.HasKey("SicknessId", "DietId");

                    b.HasIndex("DietId");

                    b.ToTable("SicknessDiet");
                });

            modelBuilder.Entity("SicknessFood", b =>
                {
                    b.Property<int>("SicknessId")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<bool>("MustBe")
                        .HasColumnType("bit");

                    b.HasKey("SicknessId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("SicknessFoods");
                });

            modelBuilder.Entity("SleepRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SleepRates");
                });

            modelBuilder.Entity("Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SportGroupId");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("SportGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SportGroups");
                });

            modelBuilder.Entity("SportItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionAudio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("SportItems");
                });

            modelBuilder.Entity("SportItemImage", b =>
                {
                    b.Property<int>("SportItemId")
                        .HasColumnType("int");

                    b.Property<int>("SImageId")
                        .HasColumnType("int");

                    b.HasKey("SportItemId", "SImageId");

                    b.HasIndex("SImageId");

                    b.ToTable("SportItemImages");
                });

            modelBuilder.Entity("SportMuscle", b =>
                {
                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<int>("MuscleId")
                        .HasColumnType("int");

                    b.HasKey("SportId", "MuscleId");

                    b.HasIndex("MuscleId");

                    b.ToTable("SportMuscles");
                });

            modelBuilder.Entity("Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FcmToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageProfileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntroducedUserPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("WaterRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WaterRates");
                });

            modelBuilder.Entity("AllergyDiet", b =>
                {
                    b.HasOne("Allergy", "Allergy")
                        .WithMany("AllergyDiets")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet", "Diet")
                        .WithMany("AllergyDiets")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Diet");
                });

            modelBuilder.Entity("BadHabitDiet", b =>
                {
                    b.HasOne("BadHabit", "BadHabit")
                        .WithMany("BadHabitDiets")
                        .HasForeignKey("BadHabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet", "Diet")
                        .WithMany("BadHabitDiets")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BadHabit");

                    b.Navigation("Diet");
                });

            modelBuilder.Entity("Diet", b =>
                {
                    b.HasOne("ActivityRate", "ActivityRate")
                        .WithMany()
                        .HasForeignKey("ActivityRateId");

                    b.HasOne("Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId");

                    b.HasOne("Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId");

                    b.HasOne("SleepRate", "SleepRate")
                        .WithMany()
                        .HasForeignKey("SleepRateId");

                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaterRate", "WaterRate")
                        .WithMany()
                        .HasForeignKey("WaterRateId");

                    b.Navigation("ActivityRate");

                    b.Navigation("Gender");

                    b.Navigation("Goal");

                    b.Navigation("Plan");

                    b.Navigation("SleepRate");

                    b.Navigation("User");

                    b.Navigation("WaterRate");
                });

            modelBuilder.Entity("FatPartDiet", b =>
                {
                    b.HasOne("Diet", "Diet")
                        .WithMany("FatPartDiets")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FatPart", "FatPart")
                        .WithMany("FatPartDiets")
                        .HasForeignKey("FatPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("FatPart");
                });

            modelBuilder.Entity("Food", b =>
                {
                    b.HasOne("Group", "Group")
                        .WithMany("Foods")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("FoodImage", b =>
                {
                    b.HasOne("Food", "Food")
                        .WithMany("FoodImages")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FoodMeel", b =>
                {
                    b.HasOne("Food", "Food")
                        .WithMany("FoodMeels")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meel", "Meel")
                        .WithMany("FoodMeels")
                        .HasForeignKey("MeelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Meel");
                });

            modelBuilder.Entity("FoodNutrient", b =>
                {
                    b.HasOne("Food", "Food")
                        .WithMany("FoodNutrients")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nutrient", "Nutrient")
                        .WithMany("FoodNutrients")
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Nutrient");
                });

            modelBuilder.Entity("FoodUnit", b =>
                {
                    b.HasOne("Food", "Food")
                        .WithMany("FoodUnits")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unit", "Unit")
                        .WithMany("FoodUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Group", b =>
                {
                    b.HasOne("Group", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Invoice", b =>
                {
                    b.HasOne("ServicePackage", "ServicePackage")
                        .WithMany()
                        .HasForeignKey("ServicePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServicePackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Plan", b =>
                {
                    b.HasOne("Diet", "Diet")
                        .WithMany()
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");
                });

            modelBuilder.Entity("PlanDate", b =>
                {
                    b.HasOne("Plan", "Plan")
                        .WithMany("PlanDates")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("PlanDetail", b =>
                {
                    b.HasOne("Food", "Food")
                        .WithMany("PlanDetails")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meel", "Meel")
                        .WithMany("PlanDetails")
                        .HasForeignKey("MeelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlanDate", "PlanDate")
                        .WithMany("PlanDetails")
                        .HasForeignKey("PlanDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unit", "Unit")
                        .WithMany("PlanDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Meel");

                    b.Navigation("PlanDate");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Podcast", b =>
                {
                    b.HasOne("PodcastGroup", "PodcastGroup")
                        .WithMany("Podcasts")
                        .HasForeignKey("PodcastGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PodcastGroup");
                });

            modelBuilder.Entity("PodcastQuestion", b =>
                {
                    b.HasOne("Podcast", "Podcast")
                        .WithMany("PodcastQuestions")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Question", "Question")
                        .WithMany("PodcastQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Podcast");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PodcastSickness", b =>
                {
                    b.HasOne("Podcast", "Podcast")
                        .WithMany("PodcastSicknesses")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sickness", "Sickness")
                        .WithMany("PodcastSicknesses")
                        .HasForeignKey("SicknessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Podcast");

                    b.Navigation("Sickness");
                });

            modelBuilder.Entity("ProteinDiet", b =>
                {
                    b.HasOne("Diet", "Diet")
                        .WithMany("ProteinDiets")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Protein", "Protein")
                        .WithMany("ProteinDiets")
                        .HasForeignKey("ProteinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("Protein");
                });

            modelBuilder.Entity("QuestionDiet", b =>
                {
                    b.HasOne("Diet", "Diet")
                        .WithMany("QuestionDiets")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Question", "Question")
                        .WithMany("QuestionDiets")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Recipe", b =>
                {
                    b.HasOne("Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("ServicePackage", b =>
                {
                    b.HasOne("Discount", "Discount")
                        .WithMany("servicePackages")
                        .HasForeignKey("DiscountId");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("SicknessDiet", b =>
                {
                    b.HasOne("Diet", "Diet")
                        .WithMany("SicknessDiets")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sickness", "Sickness")
                        .WithMany("SicknessDiets")
                        .HasForeignKey("SicknessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("Sickness");
                });

            modelBuilder.Entity("SicknessFood", b =>
                {
                    b.HasOne("Food", "Food")
                        .WithMany("SicknessFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sickness", "Sickness")
                        .WithMany("SicknessFoods")
                        .HasForeignKey("SicknessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Sickness");
                });

            modelBuilder.Entity("Sport", b =>
                {
                    b.HasOne("SportGroup", "SportGroup")
                        .WithMany("Sports")
                        .HasForeignKey("SportGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportGroup");
                });

            modelBuilder.Entity("SportItem", b =>
                {
                    b.HasOne("Sport", "Sport")
                        .WithMany("sportItems")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("SportItemImage", b =>
                {
                    b.HasOne("SImage", "SImage")
                        .WithMany("SportItemImages")
                        .HasForeignKey("SImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportItem", "SportItem")
                        .WithMany("SportItemImages")
                        .HasForeignKey("SportItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SImage");

                    b.Navigation("SportItem");
                });

            modelBuilder.Entity("SportMuscle", b =>
                {
                    b.HasOne("Muscle", "Muscle")
                        .WithMany("SportMuscles")
                        .HasForeignKey("MuscleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sport", "Sport")
                        .WithMany("SportMuscles")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Muscle");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Allergy", b =>
                {
                    b.Navigation("AllergyDiets");
                });

            modelBuilder.Entity("BadHabit", b =>
                {
                    b.Navigation("BadHabitDiets");
                });

            modelBuilder.Entity("Diet", b =>
                {
                    b.Navigation("AllergyDiets");

                    b.Navigation("BadHabitDiets");

                    b.Navigation("FatPartDiets");

                    b.Navigation("ProteinDiets");

                    b.Navigation("QuestionDiets");

                    b.Navigation("SicknessDiets");
                });

            modelBuilder.Entity("Discount", b =>
                {
                    b.Navigation("servicePackages");
                });

            modelBuilder.Entity("FatPart", b =>
                {
                    b.Navigation("FatPartDiets");
                });

            modelBuilder.Entity("Food", b =>
                {
                    b.Navigation("FoodImages");

                    b.Navigation("FoodMeels");

                    b.Navigation("FoodNutrients");

                    b.Navigation("FoodUnits");

                    b.Navigation("PlanDetails");

                    b.Navigation("SicknessFoods");
                });

            modelBuilder.Entity("Group", b =>
                {
                    b.Navigation("Childrens");

                    b.Navigation("Foods");
                });

            modelBuilder.Entity("Meel", b =>
                {
                    b.Navigation("FoodMeels");

                    b.Navigation("PlanDetails");
                });

            modelBuilder.Entity("Muscle", b =>
                {
                    b.Navigation("SportMuscles");
                });

            modelBuilder.Entity("Nutrient", b =>
                {
                    b.Navigation("FoodNutrients");
                });

            modelBuilder.Entity("Plan", b =>
                {
                    b.Navigation("PlanDates");
                });

            modelBuilder.Entity("PlanDate", b =>
                {
                    b.Navigation("PlanDetails");
                });

            modelBuilder.Entity("Podcast", b =>
                {
                    b.Navigation("PodcastQuestions");

                    b.Navigation("PodcastSicknesses");
                });

            modelBuilder.Entity("PodcastGroup", b =>
                {
                    b.Navigation("Podcasts");
                });

            modelBuilder.Entity("Protein", b =>
                {
                    b.Navigation("ProteinDiets");
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.Navigation("PodcastQuestions");

                    b.Navigation("QuestionDiets");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SImage", b =>
                {
                    b.Navigation("SportItemImages");
                });

            modelBuilder.Entity("Sickness", b =>
                {
                    b.Navigation("PodcastSicknesses");

                    b.Navigation("SicknessDiets");

                    b.Navigation("SicknessFoods");
                });

            modelBuilder.Entity("Sport", b =>
                {
                    b.Navigation("sportItems");

                    b.Navigation("SportMuscles");
                });

            modelBuilder.Entity("SportGroup", b =>
                {
                    b.Navigation("Sports");
                });

            modelBuilder.Entity("SportItem", b =>
                {
                    b.Navigation("SportItemImages");
                });

            modelBuilder.Entity("Unit", b =>
                {
                    b.Navigation("FoodUnits");

                    b.Navigation("PlanDetails");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
